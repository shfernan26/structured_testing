# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - unit-test
  - integrate-test
#   - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: osrf/ros:galactic-desktop
  artifacts:
    untracked: true
    paths:
    - ./build/
    - ./install/
  script:
    - echo "source /opt/ros/galactic/setup.bash" >> ~/.bashrc
    - source ~/.bashrc
    - sudo apt-get update
    - sudo apt-get install -y build-essential python3-pip wget kmod usbutils udev software-properties-common
    - python3 -m pip install pyyaml empy
    - echo "Install Kvaser SDK here"
    - sudo apt-get install -y linux-headers-`uname -r`
    - sudo apt install python3-colcon-common-extensions 
    - wget --content-disposition "https://www.kvaser.com/download/?utm_source=software&utm_ean=7330130980754&utm_status=latest"
    - tar xvzf linuxcan.tar.gz
    - cd linuxcan
    - mkdir src
    - sudo make
    - sudo make install      
    - echo "Install gcc"
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    - sudo apt-get update
    - echo "build monorepo"
    - echo $PWD
    - cd ..
    - source /opt/ros/galactic/setup.bash
    - colcon build --packages-skip simulation

unit-test-job:   # This job runs in the test stage.
  stage: unit-test    # It only starts when the job in the build stage completes successfully.
  dependencies: 
    - build-job
  artifacts:
    untracked: true
    paths:
    - ./build/
    - ./install/
  script:
    - echo "Running unit tests..."
    - echo "Current directory is $PWD"
    - ls
    - source install/setup.bash
    - colcon test --packages-skip simulation --event-handlers console_direct+
    - colcon test-result

integrate-test-job:   # This job runs in the test stage.
  stage: integrate-test    # It only starts when the job in the build stage completes successfully.
  dependencies: 
    - unit-test-job
  script:
    - echo "Running integration tests..."
    - echo "Current directory is $PWD"
    - ls
    - source install/setup.bash
    - python3 src/structured_testing/structured_testing/start_sim.py src/structured_testing/test/my_test_example.sim
    - python3 src/structured_testing/structured_testing/check_results.py src/structured_testing/test/my_test_example.simresults

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

